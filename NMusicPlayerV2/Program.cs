using System;
using System.Diagnostics;
using System.IO;
using System.Windows.Forms;
using System.Net.NetworkInformation;
using Microsoft.VisualBasic.Devices; // Add reference to Microsoft.VisualBasic

namespace NMusicPlayerV2
{
    static class Program
    {
        [STAThread]
        static void Main()
        {
            Application.SetCompatibleTextRenderingDefault(false);
            Application.EnableVisualStyles();

            // Create and show the UpdateChecker form as a modal dialog
            using (var updateChecker = new UpdateChecker())
            {
                updateChecker.ShowDialog();
            }

            try
            {
                Application.Run(new MainGui());
            }
            catch (Exception ex)
            {
                // Get OS version information
                Version osVersion = Environment.OSVersion.Version;
                string versionString = $"{osVersion.Major}.{osVersion.Minor}.{osVersion.Build}";

                // Determine if the application is running in debug mode
                bool isDebug = Debugger.IsAttached;

                // Get max RAM
                var computerInfo = new ComputerInfo();
                ulong maxRAM = computerInfo.TotalPhysicalMemory / (1024 * 1024); // Convert bytes to MB

                // Get the version of the program
                string programVersion = UpdateChecker._internalVersion;

                // Check internet connectivity
                bool isConnected = NetworkInterface.GetIsNetworkAvailable();

                // Format the Markdown string for the error log
                string markdownContent = @$"# Application Error Report

## Error Details
- **Message:** {ex.Message}
- **Type:** {ex.GetType().FullName}
- **Where:** MainGui

<!-- Information that may-or-may-not help us debug -->

## Environment
- **OS Version:** {versionString}
- **Debug Mode:** {isDebug}
- **Max RAM:** {maxRAM} MB
- **Program Version:** {programVersion}
- **Internet Connectivity:** {(isConnected ? "Connected" : "Not Connected")}

## Stack Trace
{ex.StackTrace.Replace("\n", "\n\n")}



<!-- Please upload this to Github issues here: https://github.com/Nilonic/NMusicPlayerV2/issues/new -->
<!-- Auto-generated by NMusicPlayer V2 -->
";

                // Define the file path for the error log
                string filePath = "Errors/errorlog.md";

                try
                {
                    // Get the directory from the file path
                    string directoryPath = Path.GetDirectoryName(filePath);

                    // Create the directory if it doesn't exist
                    if (!Directory.Exists(directoryPath))
                    {
                        Directory.CreateDirectory(directoryPath);
                    }

                    // Write the Markdown content to the file
                    File.WriteAllText(filePath, markdownContent);
                }
                catch (Exception Fileex)
                {
                    // Handle exceptions, such as I/O errors
                    Console.WriteLine($"An error occurred: {Fileex.Message}");
                }

                // Show the ErrorHandler form
                using (var errorHandler = new ErrorHandler(ex))
                {
                    errorHandler.ShowDialog();
                }

                // Exit the application
                Application.Exit();
            }
        }
    }
}
